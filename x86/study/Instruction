# 每个函数开始的第一条指令
f3 0f 1e fa          	endbr64

ENDBRANCH（有关详细信息，请参见第73节）是一条新指令，用于标记程序中间接调用和跳转的有效跳转目标地址。该指令操作码被选择为旧机器上的NOP，以便使用ENDBRANCH新指令编译的程序继续运行   没有执行CET的旧计算机上。在支持CET的处理器上，ENDBRANCH仍然是NOP，并且主要由处理器管道用作标记指令以检测违反控制流的行为。 CPU实现了一个状态机，该状态机跟踪间接的jmp和调用指令。当其中之一   看到指令，状态机从IDLE移到WAIT_FOR_ENDBRANCH状态。在WAIT_FOR_ENDBRANCH状态下，程序流中的下一条指令必须为ENDBRANCH。如果未看到ENDBRANCH，则处理器会导致控制保护异常（#CP），否则状态机将移回IDLE状态。


mov和lea区别：
mov的源操作数和目标操作数，其中目标操作数不能是立即数，且源操作数与目标操作数不能同时是存储器（内存地址）。
lea的源操作数只能是有效地址，目标操作数只能是寄存器。
